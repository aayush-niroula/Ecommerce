// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
 
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id Int @id @default(autoincrement())
  name String
  email String  @unique
  password String
  isAdmin Boolean @default(false)
  cartItems CartItem[]
  orders Order[]
  wishlist Wishlist[]
  reviews Review[]
  createdAt DateTime @default(now())

  
}
model Category{
  id Int @id @default(autoincrement())
  name String
  description String?
  products Product[]
}
model Product{
  id Int @id @default(autoincrement())
  name String
  description String?
  price Float
  brand String @default("Unknown")
  stock Int @default(0)
  imageUrl String?
  categoryId Int
  category Category? @relation(fields: [categoryId], references: [id],onDelete: Cascade)
  cartItems CartItem[]  
  orderItems OrderItem[]
  wishlist Wishlist[]
  reviews Review[]
  createdAt DateTime @default(now())

}
model CartItem{
  id Int @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId Int
  productId Int
  product Product @relation(fields: [productId],references: [id])
  quantity Int @default(1)

  @@unique([userId,productId])
 
}
model Order{
  id Int @id @default(autoincrement())
  user User? @relation(fields: [userId],references: [id])
  userId Int
  totalAmount Float
  status String @default("pending")
  shippingAddress String
  orderItems OrderItem[]
  payment Payment?
  createdAt DateTime @default(now())
}

model OrderItem{
  id Int @id @default(autoincrement())
  order Order @relation(fields: [orderId],references: [id])
  orderId Int
  product Product @relation(fields: [productId],references: [id])
  productId Int
  quantity Int
  price Float
}
model Payment {
  id           Int      @id @default(autoincrement())
  order        Order    @relation(fields: [orderId], references: [id])
  orderId      Int      @unique
  method       String   // stripe, paypal
  status       String   @default("unpaid")
  paymentDate  DateTime?
}
model Wishlist {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int

  @@unique([userId, productId])
}

model Review {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
}